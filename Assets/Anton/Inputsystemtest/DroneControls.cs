//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Anton/Inputsystemtest/DroneControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DroneControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DroneControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DroneControls"",
    ""maps"": [
        {
            ""name"": ""Drone1"",
            ""id"": ""37efff80-8416-470f-91ea-c8884224969f"",
            ""actions"": [
                {
                    ""name"": ""Acend"",
                    ""type"": ""Value"",
                    ""id"": ""789c9b7f-15c7-4d4e-9061-73a94a7e5a52"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Decend"",
                    ""type"": ""Value"",
                    ""id"": ""e4d09feb-f009-4803-9e9c-ea6818be1dd8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""ae89e56c-aef3-4af6-95c4-7010972dd8bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""3e80d51e-964a-4e11-a7f3-d24d40384f2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move1"",
                    ""type"": ""Value"",
                    ""id"": ""c14ce421-b094-44f1-88ca-ca4e600af9bf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8daa41d-5d48-44cc-9ee3-025c5da7086b"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3a48694-5ab1-486e-89f6-a733ba2bb6b3"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Decend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""738c7e31-537c-43ec-9eee-f9db3be9dd0b"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d8e43aa-6b33-4957-a7d2-f1d82110ae65"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56062768-e282-4e81-a0c4-e53604728e77"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82c67fdf-46c1-4a79-a6ac-0921c1245d6d"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Drone1
        m_Drone1 = asset.FindActionMap("Drone1", throwIfNotFound: true);
        m_Drone1_Acend = m_Drone1.FindAction("Acend", throwIfNotFound: true);
        m_Drone1_Decend = m_Drone1.FindAction("Decend", throwIfNotFound: true);
        m_Drone1_RotateLeft = m_Drone1.FindAction("RotateLeft", throwIfNotFound: true);
        m_Drone1_RotateRight = m_Drone1.FindAction("RotateRight", throwIfNotFound: true);
        m_Drone1_Move1 = m_Drone1.FindAction("Move1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Drone1
    private readonly InputActionMap m_Drone1;
    private List<IDrone1Actions> m_Drone1ActionsCallbackInterfaces = new List<IDrone1Actions>();
    private readonly InputAction m_Drone1_Acend;
    private readonly InputAction m_Drone1_Decend;
    private readonly InputAction m_Drone1_RotateLeft;
    private readonly InputAction m_Drone1_RotateRight;
    private readonly InputAction m_Drone1_Move1;
    public struct Drone1Actions
    {
        private @DroneControls m_Wrapper;
        public Drone1Actions(@DroneControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Acend => m_Wrapper.m_Drone1_Acend;
        public InputAction @Decend => m_Wrapper.m_Drone1_Decend;
        public InputAction @RotateLeft => m_Wrapper.m_Drone1_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_Drone1_RotateRight;
        public InputAction @Move1 => m_Wrapper.m_Drone1_Move1;
        public InputActionMap Get() { return m_Wrapper.m_Drone1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Drone1Actions set) { return set.Get(); }
        public void AddCallbacks(IDrone1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Drone1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Drone1ActionsCallbackInterfaces.Add(instance);
            @Acend.started += instance.OnAcend;
            @Acend.performed += instance.OnAcend;
            @Acend.canceled += instance.OnAcend;
            @Decend.started += instance.OnDecend;
            @Decend.performed += instance.OnDecend;
            @Decend.canceled += instance.OnDecend;
            @RotateLeft.started += instance.OnRotateLeft;
            @RotateLeft.performed += instance.OnRotateLeft;
            @RotateLeft.canceled += instance.OnRotateLeft;
            @RotateRight.started += instance.OnRotateRight;
            @RotateRight.performed += instance.OnRotateRight;
            @RotateRight.canceled += instance.OnRotateRight;
            @Move1.started += instance.OnMove1;
            @Move1.performed += instance.OnMove1;
            @Move1.canceled += instance.OnMove1;
        }

        private void UnregisterCallbacks(IDrone1Actions instance)
        {
            @Acend.started -= instance.OnAcend;
            @Acend.performed -= instance.OnAcend;
            @Acend.canceled -= instance.OnAcend;
            @Decend.started -= instance.OnDecend;
            @Decend.performed -= instance.OnDecend;
            @Decend.canceled -= instance.OnDecend;
            @RotateLeft.started -= instance.OnRotateLeft;
            @RotateLeft.performed -= instance.OnRotateLeft;
            @RotateLeft.canceled -= instance.OnRotateLeft;
            @RotateRight.started -= instance.OnRotateRight;
            @RotateRight.performed -= instance.OnRotateRight;
            @RotateRight.canceled -= instance.OnRotateRight;
            @Move1.started -= instance.OnMove1;
            @Move1.performed -= instance.OnMove1;
            @Move1.canceled -= instance.OnMove1;
        }

        public void RemoveCallbacks(IDrone1Actions instance)
        {
            if (m_Wrapper.m_Drone1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDrone1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Drone1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Drone1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Drone1Actions @Drone1 => new Drone1Actions(this);
    public interface IDrone1Actions
    {
        void OnAcend(InputAction.CallbackContext context);
        void OnDecend(InputAction.CallbackContext context);
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
        void OnMove1(InputAction.CallbackContext context);
    }
}
